---
import { getCollection } from 'astro:content';

type Props = {
  limit?: number;          // 顯示幾篇
  tags?: string[];         // 過濾指定標籤（任一符合即通過）
  includeDraft?: boolean;  // 是否顯示草稿
};
const { limit = Infinity, tags = [], includeDraft = false } = Astro.props;

// 取出 posts 集合，並做過濾
let posts = await getCollection('posts', ({ data }) => {
  if (!includeDraft && data.draft) return false;
  if (tags.length && !data.tags?.some(t => tags.includes(t))) return false;
  return true;
});

// 依發佈時間新到舊排序
posts.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

// 限制數量
if (Number.isFinite(limit)) posts = posts.slice(0, limit);
---

<ul class="flex flex-col gap-6">
  {posts.map((post) => (
    <li class="rounded-2xl border border-gray-200/70 bg-white p-5 shadow-sm">
      <a href={`/posts/${post.slug}/`} class="group block">
        <div class="mb-2 flex flex-wrap items-center gap-3 text-xs text-gray-500">
          {post.data.tags?.[0] && (
            <span class="rounded-full bg-gray-100 px-2 py-0.5">{post.data.tags[0]}</span>
          )}
          <time datetime={post.data.publishDate.toISOString()}>
            {post.data.publishDate.toLocaleDateString('zh-TW')}
          </time>
          {typeof post.data.readingMinutes === 'number' && (
            <span>• {post.data.readingMinutes} 分鐘</span>
          )}
          {post.data.author && <span>• {post.data.author}</span>}
        </div>

        <h3 class="text-lg font-semibold leading-snug text-gray-900 group-hover:underline">
          {post.data.title}
        </h3>

        {post.data.description && (
          <p class="mt-1 text-sm text-gray-600">{post.data.description}</p>
        )}

        {post.data.tags?.length ? (
          <div class="mt-3 flex flex-wrap gap-2">
            {post.data.tags.slice(0, 5).map((t) => (
              <span class="rounded-full bg-gray-100 px-2 py-0.5 text-xs">{t}</span>
            ))}
          </div>
        ) : null}
      </a>
    </li>
  ))}
</ul>
